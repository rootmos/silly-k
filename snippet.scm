(import (silly-k))

(define (debug-passes s)
  (display "> ")
  (display s)
  (newline)

  (fold-left (lambda (acc p)
               (let* ([pass (car p)]
                      [unparser (cdr p)]
                      [expr (cond
                              [(null? acc) (list pass)]
                              [else (list pass acc)])])
                 (pretty-print ((eval unparser) (with-input-from-string s (lambda () (eval expr)))))
                 expr))
             '()
             passes)
  (newline))

;(debug-passes "foo")
;(debug-passes "foo bar")
(debug-passes "1")
(debug-passes "1 2 3")
;(debug-passes "{w}")
;(debug-passes "{a}")
(debug-passes "{1-w}2")
(debug-passes "{1+w}2 3 4")
(debug-passes "{1+w}'1 2 3")
(debug-passes "{1-w}'1 2 3")
;(debug-passes "{x w w}")
;(debug-passes "{w+{w}}2")
(debug-passes "1+1 2 3")
(debug-passes "1 2+3 4")
(debug-passes "1 2 3+1")
(debug-passes "1{a+w}2")
(debug-passes "1{a+w}2 3 4")
(debug-passes "1-2")
(debug-passes "1+2")
(debug-passes "1+2+3+4")
(debug-passes "1+2-3+4")
(debug-passes "(1:)+0:")
(debug-passes "(0:)+0:")
(debug-passes "](-2)")
(debug-passes "2-3")
(debug-passes "]1")
(debug-passes "]1 2 3")
(debug-passes "](+/1 2 3)")
(debug-passes "]@+/1 2 3")
(debug-passes "1=2")
(debug-passes "{1=2;w;1 4}")
(debug-passes "{w=2;w;w=a;1;1}")
(debug-passes "{w=2;w;]w}")
(debug-passes "(1=2;0 7;1 4)")
(debug-passes "(1=2;5;]5)")
